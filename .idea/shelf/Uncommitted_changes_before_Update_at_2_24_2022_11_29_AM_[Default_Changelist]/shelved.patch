Index: app/src/main/java/detrack/zaryansgroup/com/detrack/activity/activites/RegisterActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package detrack.zaryansgroup.com.detrack.activity.activites;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.app.ProgressDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.Observer;\r\nimport androidx.lifecycle.ViewModelProvider;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport detrack.zaryansgroup.com.detrack.R;\r\nimport detrack.zaryansgroup.com.detrack.activity.Adapter.VehicleListAdapter;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CompanyDetailsModel.CompanyDetailsListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CompanyDetailsModel.CompanyDetailsModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CompanyItemsModel.CompanyItemListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CompanyItemsModel.DeliveryItemModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CompanyRouteModel.CompanyRouteListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CompanyRouteModel.RouteModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.CustomerPriceModel.CustomerPriceListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.LoginModel.LoginListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.LoginModel.LoginModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.Params;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.RegisterCustomerModel.RegisterdCustomerListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.RegisterCustomerModel.RegisterdCustomerModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.VehiclesModel.VehicleListModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.Model.VehiclesModel.VehicleModel;\r\nimport detrack.zaryansgroup.com.detrack.activity.SQLlite.ZEDTrackDB;\r\nimport detrack.zaryansgroup.com.detrack.activity.SharedPreferences.SharedPrefs;\r\nimport detrack.zaryansgroup.com.detrack.activity.SyncDataServerToSqliteDB.SyncDataFromServer;\r\nimport detrack.zaryansgroup.com.detrack.activity.utilites.ConnectionDetector;\r\nimport detrack.zaryansgroup.com.detrack.activity.utilites.RegisterFCM;\r\nimport detrack.zaryansgroup.com.detrack.activity.utilites.Utility;\r\nimport detrack.zaryansgroup.com.detrack.activity.viewmodels.Response_Login_VM;\r\nimport timber.log.Timber;\r\n\r\npublic class RegisterActivity extends AppCompatActivity {\r\n\r\n    int CountBank=0;\r\n    ProgressDialog progress;\r\n\r\n    ZEDTrackDB db;\r\n    ArrayList<RegisterdCustomerModel> feedRegCustomerList;\r\n    ArrayList<DeliveryItemModel> feedCompanyItemList;\r\n\r\n    // ArrayListBankFeed Will come here...\r\n    ArrayList<Params> paramsArrayList;\r\n    ArrayList<RouteModel> routelist;\r\n    Button loginBtn;\r\n    EditText UserNameET, PasswordET;\r\n    Context context;\r\n    String regId;\r\n    public static final String REG_ID = \"regId\";\r\n    private static final String APP_VERSION = \"appVersion\";\r\n    SharedPrefs prefs;\r\n    CheckBox isStayLogin;\r\n    boolean StayLogin = false;\r\n    private ProgressDialog initialFileDilog;\r\n    String firebaseToken = \"\";\r\n\r\n\r\n    private ProgressDialog dialog;\r\n    Response_Login_VM response_login_vm;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        Timber.d(\"Oncreate\");\r\n        setContentView(R.layout.activity_register);\r\n\r\n\r\n\r\n        context = getApplicationContext();\r\n        UserNameET = findViewById(R.id.user_name);\r\n        PasswordET = findViewById(R.id.user_password);\r\n        loginBtn = findViewById(R.id.btn_login);\r\n        isStayLogin = findViewById(R.id.islogin);\r\n        prefs = new SharedPrefs(this);\r\n        db = new ZEDTrackDB(this);\r\n        dialog = new ProgressDialog(RegisterActivity.this);\r\n        dialog.setCancelable(false);\r\n\r\n        progress = new ProgressDialog(this);\r\n        progress.setMessage(\"Loading data, please wait\");\r\n\r\n\r\n        initialFileDilog = new ProgressDialog(RegisterActivity.this);\r\n        if (getActionBar() != null) {\r\n            setUpActionBar(getSupportActionBar());\r\n        }\r\n\r\n        paramsArrayList = new ArrayList<>();\r\n        feedRegCustomerList = new ArrayList<>();\r\n        feedCompanyItemList = new ArrayList<>();\r\n        routelist = new ArrayList<>();\r\n        // here i will initialize my banks arraylist\r\n\r\n\r\n        //login ViewModel initialize\r\n        response_login_vm = new ViewModelProvider(this).get(Response_Login_VM.class);\r\n        response_login_vm.init();\r\n\r\n        // registering Observers\r\n        boolean hIsLogout = prefs.hGetLogOut();\r\n\r\n\r\n        hSubscribeObservers();\r\n\r\n        loginBtn.setOnClickListener(v -> {\r\n\r\n            View view = RegisterActivity.this.getCurrentFocus();\r\n            Utility.HideKeyBoard(v, context);\r\n            if (ConnectionDetector.isConnectingToInternet(RegisterActivity.this)) {\r\n                if (UserNameET.getText().toString().equals(\"\") || PasswordET.getText().toString().equals(\"\")) {\r\n                    Utility.Toast(RegisterActivity.this, \"Field cannot be empty.\");\r\n                } else {\r\n                    prefs.hSetLogout(false);\r\n                    if (!prefs.hGetLogOut()) {\r\n                        hSubscribeObservers();\r\n                    }\r\n\r\n                    ArrayList<Params> parameter = new ArrayList<Params>();\r\n                    Params p1 = new Params();\r\n                    Params p2 = new Params();\r\n                    p1.setKey(\"UserName\");\r\n                    p1.setValue(UserNameET.getText().toString());\r\n\r\n                    p2.setKey(\"Password\");\r\n                    p2.setValue(PasswordET.getText().toString());\r\n\r\n                    parameter.add(p1);\r\n                    parameter.add(p2);\r\n\r\n                    dialog.setMessage(\"Login...\");\r\n                    dialog.show();\r\n                    response_login_vm.ReqLogin(UserNameET.getText().toString(), PasswordET.getText().toString());\r\n                }\r\n            } else {\r\n                Utility.Toast(RegisterActivity.this, \"Check network connection and try again\");\r\n            }\r\n\r\n        });\r\n\r\n\r\n        isStayLogin.setOnClickListener(v -> StayLogin = isStayLogin.isChecked());\r\n\r\n\r\n        if (prefs.IsStayLogin()) {\r\n            Intent intent = new Intent(RegisterActivity.this, WelcomeActivity.class);\r\n            startActivity(intent);\r\n            overridePendingTransition(R.anim.right_in, R.anim.left_out);\r\n            finish();\r\n\r\n            Timber.d(\"SiteId=\"+prefs.getCompanySiteID()+\"\");\r\n            Timber.d(\"CompanyId=\"+prefs.getCompanyID()+\"\");\r\n            Timber.d(\"SiteId=\"+prefs.getUserId()+\"\");\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private void hSubscribeObservers() {\r\n\r\n        if (!prefs.hGetLogOut()) {\r\n\r\n            Timber.d(\"hlogout Status:\"+prefs.hGetLogOut());\r\n\r\n            requestLoginVM();\r\n            getRegisterCustomerInfoVM();\r\n            getCompanyRoutesVM();\r\n            getCompanyDetailsVM();\r\n            getCompanyItemsVM();\r\n            getCustomerPrice();\r\n\r\n            Timber.d(\"UserId is\"+prefs.getUserId());\r\n\r\n            response_login_vm.getCompanyVehicles().observe(\r\n                    this,\r\n                    vehicleListModel -> {\r\n                        CountBank++;\r\n                        hShowVehicleDialog(vehicleListModel);\r\n                    }\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void hShowVehicleDialog(VehicleListModel vehicleListModel) {\r\n\r\n        if (vehicleListModel != null) {\r\n            List<VehicleModel> tlist = vehicleListModel.getTable();\r\n            if (tlist.size() > 0) {\r\n                selectVehicleDialog((ArrayList<VehicleModel>) tlist);\r\n                initialFileDilog.dismiss();\r\n            }\r\n        } else {\r\n            Toast.makeText(context, \"No Vehicle Found\", Toast.LENGTH_SHORT).show();\r\n            initialFileDilog.dismiss();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private void requestLoginVM() {\r\n//        requestLogin(Utility.BASE_LIVE_URL +\"api/Authenticate/AuthenticateUser?UserName=\" + UserNameET.getText().toString() + \"&Password=\" + PasswordET.getText().toString());\r\n\r\n        final LiveData<LoginListModel> logindataObserver = response_login_vm.getLogindata();\r\n\r\n        logindataObserver.observe(this, new Observer<LoginListModel>() {\r\n            @Override\r\n            public void onChanged(LoginListModel loginListModel) {\r\n\r\n                if (loginListModel != null) {\r\n                    List<LoginModel> loginModel = loginListModel.getTable();\r\n\r\n                    if (loginModel.size() > 0) {\r\n                        LoginModel responce_loginModel = loginModel.get(0);\r\n\r\n                        prefs.SetUserId(responce_loginModel.getUserId());\r\n                        prefs.SetIsFOCRequired(responce_loginModel.getIsFOCRequired());\r\n                        prefs.setCompanyID(responce_loginModel.getCompanyID());\r\n                        prefs.setCompanySiteID(responce_loginModel.getCompanySiteID());\r\n                        prefs.setUserName(responce_loginModel.getUsername());\r\n                        prefs.setUserPassword(responce_loginModel.getPassword());\r\n                        prefs.setEmployeeID(responce_loginModel.getEmployeeID());\r\n                        prefs.setEmployeeName(responce_loginModel.getEmployeeName() == null ? \"N/A\" : responce_loginModel.getEmployeeName());\r\n                        prefs.setCompanyName(responce_loginModel.getEmployeeName() == null ? \"N/A\" : responce_loginModel.getEmployeeName());\r\n                        prefs.setDesignation(responce_loginModel.getContactType());\r\n\r\n\r\n                        Utility.Toast(RegisterActivity.this, \"Login Successfully..\");\r\n                        initialFileDilog.setMessage(\"Please Wait Saving Initial Files\");\r\n//                        GetGCMId();\r\n                        GetFCM();\r\n\r\n                    } else {\r\n                        dialog.dismiss();\r\n                        Toast.makeText(RegisterActivity.this, \"Username / Password not correct\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n                logindataObserver.removeObservers(RegisterActivity.this);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void GetFCM() {\r\n        regId = getRegistrationId(context);\r\n        //init observer for customer info\r\n        if (TextUtils.isEmpty(regId)) {\r\n            if (prefs.getEmployeeID() != 0) {\r\n                RegisterFCM.initFCM_Register(this, prefs.getEmployeeID());\r\n                new CountDownTimer(1000, 1000) {\r\n                    @Override\r\n                    public void onTick(long millisUntilFinished) {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFinish() {\r\n                        if (!getRegistrationId(context).isEmpty()) {\r\n                            Log.d(\"customerinfo\", \"functioncall_\");\r\n                            dialog.dismiss();\r\n                            initialFileDilog.show();\r\n                            response_login_vm.ReqRegisterCustomerInfo(prefs.getCompanyID(), prefs.getCompanySiteID(),prefs.getUserId());\r\n                        } else {\r\n                            dialog.dismiss();\r\n                            initialFileDilog.dismiss();\r\n                            Utility.Toast(RegisterActivity.this, \"Failed try again\");\r\n                        }\r\n                    }\r\n                }.start();\r\n            } else {\r\n                dialog.dismiss();\r\n                Utility.Toast(RegisterActivity.this, \"Check network connection and try again\");\r\n            }\r\n            Utility.logCatMsg(\"registerGCM - successfully registered with GCM server - regId: \" + regId);\r\n        } else {\r\n\r\n            dialog.dismiss();\r\n            Utility.logCatMsg(\"RegId already available. RegId: 1\" + regId);\r\n            if (prefs.getEmployeeID() != 0) {\r\n\r\n                initialFileDilog.show();\r\n                response_login_vm.ReqRegisterCustomerInfo(prefs.getCompanyID(), prefs.getCompanySiteID(),prefs.getUserId());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void getRegisterCustomerInfoVM() {\r\n\r\n        final LiveData<RegisterdCustomerListModel> customerinfodataObserver = response_login_vm.getRegisteredCustomerInfo();\r\n        customerinfodataObserver.observe(this, new Observer<RegisterdCustomerListModel>() {\r\n            @Override\r\n            public void onChanged(RegisterdCustomerListModel registerdCustomerListModel) {\r\n\r\n                if (registerdCustomerListModel != null) {\r\n                    feedRegCustomerList.clear();\r\n                    List<RegisterdCustomerModel> feedArray = registerdCustomerListModel.getTable();\r\n\r\n                    if (feedArray.size() > 0) {\r\n                        feedRegCustomerList.addAll(feedArray);\r\n//                        getCompanyRoutesMethod(Utility.BASE_LIVE_URL +\"api/Company/GetRegisterCompanyRoutes?Company_id=\"\r\n//                                + prefs.getCompanyID() + \"&CompanySiteId=\" + prefs.getCompanySiteID());\r\n                        response_login_vm.ReqCompanyRoutes(prefs.getCompanyID(), prefs.getCompanySiteID(),prefs.getUserId());\r\n                    } else {\r\n                        initialFileDilog.dismiss();\r\n                        Utility.Toast(RegisterActivity.this, \"Failed....Login again \");\r\n                    }\r\n                } else {\r\n                    Log.d(\"VM_cusomerinfo\", \"null\");\r\n                    initialFileDilog.dismiss();\r\n                    Utility.Toast(RegisterActivity.this, \"Failed....Login again \");\r\n                }\r\n                customerinfodataObserver.removeObserver(this);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getCompanyRoutesVM() {\r\n        final LiveData<CompanyRouteListModel> routedataObserver = response_login_vm.getCompanyRoute();\r\n\r\n        routedataObserver.observe(this, new Observer<CompanyRouteListModel>() {\r\n            @Override\r\n            public void onChanged(CompanyRouteListModel companyRouteListModel) {\r\n\r\n                routelist.clear();\r\n                List<RouteModel> feedArray = companyRouteListModel.getTable();\r\n                Log.d(\"VM_routeModel\", String.valueOf(feedArray));\r\n                \r\n//                if (feedArray.size() > 0) {\r\n                    routelist.addAll(feedArray);\r\n//                   getCompanyDetailsMethod(Utility.BASE_LIVE_URL +\"api/Company/CompanyDetails?Company_id=\" + prefs.getCompanyID());\r\n                    response_login_vm.ReqCompanyDetails(prefs.getCompanyID());\r\n                    Log.d(\"companyroute\", Utility.BASE_LIVE_URL + \"api/Company/CompanyDetails?Company_id=\" + prefs.getCompanyID());\r\n\r\n//                } else {\r\n//                    Log.d(\"companyroute\", \"null\");\r\n//                    Toast.makeText(RegisterActivity.this, \"Please Assign Routes to Current User\", Toast.LENGTH_SHORT).show();\r\n//                    initialFileDilog.dismiss();\r\n//                }\r\n\r\n\r\n                routedataObserver.removeObserver(this);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getCompanyDetailsVM() {\r\n\r\n        final LiveData<CompanyDetailsListModel> detailsdataObserver = response_login_vm.getCompanyDetails();\r\n        detailsdataObserver.observe(this, new Observer<CompanyDetailsListModel>() {\r\n            @Override\r\n            public void onChanged(CompanyDetailsListModel companyDetailsListModel) {\r\n\r\n                Timber.d(\"getCompanyDetailsVM \");\r\n                if (companyDetailsListModel != null) {\r\n                    if (companyDetailsListModel.getTable().size() > 0) {\r\n                        CompanyDetailsModel feedObj = companyDetailsListModel.getTable().get(0);\r\n\r\n\r\n                        String companyName = feedObj.getCompanyTitle();\r\n                        String companyLog = feedObj.getLogo();\r\n                        String companyview = feedObj.getLayout();\r\n\r\n                        //For Controlling Discount and GST on TotalBill Activity\r\n                        String tempIsGSTVisible = feedObj.getIsGSTVisible();\r\n                        String tempIsDiscountVisible = feedObj.getIsDiscountVisible();\r\n\r\n\r\n                        prefs.setIsDiscountVisible(tempIsDiscountVisible);\r\n                        prefs.setIsGSTVisible(tempIsGSTVisible);\r\n                        prefs.setCurrency(feedObj.getCurrency());\r\n\r\n\r\n                        Timber.d(\"tempIsGSTVisible : \"+prefs.getIsGSTVisible());\r\n                        Timber.d(\"IsDiscountVisible : \"+prefs.getIsDiscountVisible());\r\n\r\n                        if (companyview.equalsIgnoreCase(\"2nd View\")) {\r\n                            prefs.setView(\"secondView\");\r\n                        }\r\n\r\n                        //String companyId = feedObj.getString(\"Company_Id\");\r\n                        if (!companyName.equals(\"null\"))\r\n                            new SharedPrefs(RegisterActivity.this).setCompanyName(companyName);\r\n                        if (!companyLog.equals(\"null\"))\r\n                            Log.d(\"logo\", companyLog);\r\n                        prefs.setComapnyLogo(companyLog);\r\n                        prefs.setGSTScheme(feedObj.getGSTScheme());\r\n                        prefs.setWholeSalePriceTax(feedObj.getWholeSalePriceTax());\r\n                        prefs.setCostPriceTax(feedObj.getCostPriceTax());\r\n                        prefs.setSalesDiscPolicy(feedObj.getSalesDiscPolicy());\r\n                        Log.d(\"companyItemList : \", paramsArrayList.toString());\r\n                        Log.d(\"itemsUrl\", Utility.BASE_LIVE_URL + \"api/Company/GetCompanyItems?Company_id=\" + prefs.getCompanyID());\r\n                        response_login_vm.ReqCompanyItems(prefs.getCompanyID(), prefs.getCompanySiteID());\r\n//                        getCompanyItemsMethod(Utility.BASE_LIVE_URL +\"api/Company/GetCompanyItems?Company_id=\" + prefs.getCompanyID());\r\n\r\n\r\n                    } else {\r\n                        Log.d(\"companydetails\", \"null\");\r\n                        initialFileDilog.dismiss();\r\n                    }\r\n\r\n                } else {\r\n                    Log.d(\"comppanydetailsList\", \"null\");\r\n                    initialFileDilog.dismiss();\r\n                }\r\n\r\n                detailsdataObserver.removeObserver(this);\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getCompanyItemsVM() {\r\n\r\n        final LiveData<CompanyItemListModel> itemdataObserver = response_login_vm.getCompanyItems();\r\n        itemdataObserver.observe(this, new Observer<CompanyItemListModel>() {\r\n            @Override\r\n            public void onChanged(CompanyItemListModel companyItemListModel) {\r\n\r\n                feedCompanyItemList.clear();\r\n                List<DeliveryItemModel> feedArray = companyItemListModel.getTable();\r\n                Log.d(\"VM_routeModel\", String.valueOf(feedArray));\r\n                Log.d(\"VM_routeModel\", String.valueOf(feedArray.size()));\r\n\r\n                if (feedArray.size() > 0) {\r\n                    feedCompanyItemList.addAll(feedArray);\r\n\r\n                } else {\r\n                    initialFileDilog.dismiss();\r\n                    Toast.makeText(context, \"Item Not Found\", Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n                if (feedRegCustomerList.size() > 0) {\r\n\r\n                    Timber.d(\"feedRegCustomerList\"+feedRegCustomerList.size());\r\n\r\n                    db.dropPlanOrderTables();\r\n                    db.dropRunTimeOrderTables();\r\n                    db.createPlanOrderTables();\r\n                    db.createRunTimeOrderTables();\r\n                    db.insertCompanyCustomer(feedRegCustomerList, \"False\");\r\n\r\n                    if (routelist.size() > 0)\r\n                        Timber.d(\"routelist\"+routelist.size());\r\n                        db.insertCompanyRoute(routelist);\r\n\r\n                    if (feedCompanyItemList.size() > 0) {\r\n                        Timber.d(\"feedCompanyItemList\"+feedCompanyItemList.size());\r\n                        db.insertCompanyItem(feedCompanyItemList);\r\n                    }\r\n\r\n\r\n                    Log.d(\"vehicleUrl\", Utility.BASE_LIVE_URL + \"api/Vehicle/getCompanyVehicles?Company_id=\"\r\n                            + prefs.getCompanyID() + \"&Compnay_siteId=\" + prefs.getCompanySiteID());\r\n\r\n                } else {\r\n                    //Utility.Toast(getApplicationContext(), \"No Job Available Today\");\r\n                    Log.d(\"Company Items\", \"null\");\r\n                    initialFileDilog.dismiss();\r\n                }\r\n                itemdataObserver.removeObserver(this);\r\n//                response_login_vm.ReqCompanyVehicles(prefs.getCompanyID(), prefs.getCompanySiteID());\r\n                response_login_vm.ReqCustomerPriceList(prefs.getCompanyID(),prefs.getCompanySiteID());\r\n            }\r\n        });\r\n    }\r\n\r\n    //todo\r\n    private void getCustomerPrice() {\r\n        final LiveData<CustomerPriceListModel> customerPriceListObv = response_login_vm.getCustomerPriceList();\r\n        customerPriceListObv.observe(this, new Observer<CustomerPriceListModel>() {\r\n            @Override\r\n            public void onChanged(CustomerPriceListModel customerPriceListModel) {\r\n\r\n                Timber.d(\"Customer Price List Model size is \"+customerPriceListModel.getTable().size()+\"\");\r\n\r\n                db.insertCustomerPrice(customerPriceListModel.getTable());\r\n                response_login_vm.ReqCompanyVehicles(prefs.getCompanyID(), prefs.getCompanySiteID());\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getCompanyVehicleVM() {\r\n        Timber.d(\"getCompanyVehicleVM\");\r\n        final LiveData<VehicleListModel> vehicledataObserver = response_login_vm.getCompanyVehicles();\r\n        vehicledataObserver.observe(this, new Observer<VehicleListModel>() {\r\n            @Override\r\n            public void onChanged(VehicleListModel vehicleListModel) {\r\n                Timber.d(\"onChanged\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //new login api implemented\r\n//    private void requestLogin(String url) {\r\n//        Log.d(\"loginUrl\", url);\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//\r\n//                dialog.dismiss();\r\n//                Log.d(\"loginResponse\", response);\r\n//                try {\r\n//                    JSONObject parent = new JSONObject(response);\r\n//                    JSONArray Table = parent.getJSONArray(\"Table\");\r\n//                    if(Table.length() > 0){\r\n//                        JSONObject userObject = Table.getJSONObject(0);\r\n//                        prefs.setCompanyID(userObject.getString(\"CompanyID\"));\r\n//                        prefs.setCompanySiteID(userObject.getString(\"CompanySiteID\"));\r\n//                        prefs.setUserName(userObject.getString(\"Username\"));\r\n//                        prefs.setUserPassword(userObject.getString(\"Password\"));\r\n//                        prefs.setEmployeeID(userObject.getInt(\"EmployeeID\"));\r\n//                        prefs.setEmployeeName(userObject.getString(\"EmployeeName\").equals(\"null\") ? \"N/A\" : userObject.getString(\"EmployeeName\"));\r\n//                        prefs.setCompanyName(userObject.getString(\"EmployeeName\").equals(\"null\") ? \"N/A\" : userObject.getString(\"EmployeeName\"));\r\n//                        prefs.setDesignation(userObject.getString(\"ContactType\"));\r\n//                        // dialog.dismiss();\r\n//                        Utility.Toast(RegisterActivity.this, \"Login Successfully..\");\r\n//                        initialFileDilog.setMessage(\"Saving initial files\");\r\n//                        GetGCMId();\r\n//                    }\r\n//                    else{\r\n//                        Toast.makeText(RegisterActivity.this, \"invalid user\", Toast.LENGTH_SHORT).show();\r\n//                    }\r\n//\r\n//\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                dialog.dismiss();\r\n//                Log.d(\"loginError\", error.getMessage() + \"\");\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(this);\r\n//        //dialog.show();\r\n//        queue.add(request);\r\n//    }\r\n\r\n    //setGCM new API implemented\r\n//    private void setGcmMethod(String url) {\r\n//\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//                Log.d(\"response\", response);\r\n//                if (response != null) {\r\n//                    try {\r\n//                        if (response.equals(\"-1\")) {\r\n//                            initialFileDilog.dismiss();\r\n//                            Utility.Toast(RegisterActivity.this, \"Failed try again\");\r\n//                        } else {\r\n//\r\n//                            Params p1 = new Params();\r\n//                            Params p2 = new Params();\r\n//                            p1.setKey(\"Company_id\");\r\n//                            p1.setValue(prefs.getCompanyID());\r\n//                            p2.setKey(\"CompanySiteId\");\r\n//                            p2.setValue(prefs.getCompanySiteID());\r\n//                            paramsArrayList.add(p1);\r\n//                            paramsArrayList.add(p2);\r\n//                            //new GetRegisterCustomerInfo(\"GetRegisterCompanyCustomer\", \"ZEDtrack.asmx\", paramsArrayList).execute();\r\n//                            getRegisterCustomerInfoMethod(Utility.BASE_LIVE_URL +\"api/Customer/GetRegisterCompanyCustomer?Company_id=\" + prefs.getCompanyID() + \"&CompanySiteID=\" + prefs.getCompanySiteID());\r\n//                            Log.d(\"registerCustomerUrl\", Utility.BASE_LIVE_URL +\"api/Customer/GetRegisterCompanyCustomer?Company_id=\" + prefs.getCompanyID() + \"&CompanySiteID=\" + prefs.getCompanySiteID());\r\n//\r\n//                        }\r\n//                    } catch (Exception e) {\r\n//                        e.getMessage();\r\n//                        Utility.logCatMsg(\"User Error \" + e);\r\n//                        initialFileDilog.dismiss();\r\n//                        Utility.Toast(RegisterActivity.this, \"Failed try again\");\r\n//                    }\r\n//                } else {\r\n//                    Utility.Toast(RegisterActivity.this, \"Sever Error\");\r\n//                    Utility.logCatMsg(\"****** NULL ******\");\r\n//                    initialFileDilog.dismiss();\r\n//                }\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                initialFileDilog.dismiss();\r\n//                Log.d(\"setGCMError\", error.getMessage() + \"\");\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(this);\r\n//        initialFileDilog.show();\r\n//        queue.add(request);\r\n//\r\n//    }\r\n\r\n//    public String GetGCMId() {\r\n////        gcm = GoogleCloudMessaging.getInstance(this);\r\n//        regId = getRegistrationId(context);\r\n////        firebaseToken = FirebaseInstanceId.getInstance().getToken();\r\n//\r\n//        Log.d(\"myFirebaseToken\", firebaseToken);\r\n//\r\n//        Log.d(\"myGCMID\", regId);\r\n//        if (TextUtils.isEmpty(regId)) {\r\n//            registerInBackground();\r\n//            Utility.logCatMsg(\"registerGCM - successfully registered with GCM server - regId: \" + regId);\r\n//        } else {\r\n//            Utility.logCatMsg(\"RegId already available. RegId: \" + regId);\r\n//            if (prefs.getEmployeeID() != 0) {\r\n//                ArrayList<Params> parameters = new ArrayList<Params>();\r\n//                Params p1 = new Params();\r\n//                Params p2 = new Params();\r\n//                Params p3 = new Params();\r\n//                Params p4 = new Params();\r\n//                p1.setKey(\"Mac_address\");\r\n//                p1.setValue(getMacAddress());\r\n//                p2.setKey(\"GCM_RegId\");\r\n//                p2.setValue(regId);\r\n//                //p3.setKey(\"TrackingId\");\r\n//                // p3.setValue(prefs.getTrackID());\r\n//                p4.setKey(\"UserId\");\r\n//                p4.setValue(prefs.getEmployeeID() + \"\");\r\n//                parameters.add(p1);\r\n//                parameters.add(p2);\r\n//                // parameters.add(p3);\r\n//                parameters.add(p4);\r\n//                //new SetGCMId(\"SetGCMId\", \"ZEDtrack.asmx\", parameters).execute();\r\n//                setGcmMethod(Utility.BASE_LIVE_URL +\"api/GCM/SetGCMID?ContactId=\" + prefs.getEmployeeID() + \"&Mac_address=\" + getMacAddress() + \"&GCMID=\" + regId);\r\n//                Log.d(\"setGcmUrl\", Utility.BASE_LIVE_URL +\"api/GCM/SetGCMID?ContactId=\" + prefs.getEmployeeID() + \"&Mac_address=\" + getMacAddress() + \"&GCMID=\" + regId);\r\n//            }\r\n//        }\r\n//        return regId;\r\n//    }\r\n\r\n    private String getRegistrationId(Context context) {\r\n        final SharedPreferences prefs = getSharedPreferences(MainActivity.class.getSimpleName(), Context.MODE_PRIVATE);\r\n        String registrationId = prefs.getString(REG_ID, \"\");\r\n        if (registrationId.isEmpty()) {\r\n            Utility.logCatMsg(\"Registration not found.\");\r\n            return \"\";\r\n        }\r\n        int registeredVersion = prefs.getInt(APP_VERSION, Integer.MIN_VALUE);\r\n        int currentVersion = getAppVersion(context);\r\n        if (registeredVersion != currentVersion) {\r\n            Utility.logCatMsg(\"App version changed.\");\r\n            return \"\";\r\n        }\r\n        return registrationId;\r\n    }\r\n\r\n    private static int getAppVersion(Context context) {\r\n        try {\r\n            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\r\n            return packageInfo.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            Utility.logCatMsg(\"I never expected this! Going down, going down!\" + e);\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n//    private void registerInBackground() {\r\n//\r\n//        //by mubashir\r\n//        FirebaseInstallations.getInstance().getToken(true).addOnCompleteListener(new OnCompleteListener<InstallationTokenResult>() {\r\n//            @Override\r\n//            public void onComplete(@NonNull Task<InstallationTokenResult> task) {\r\n//\r\n//                firebaseToken = task.getResult().getToken();\r\n//                regId = firebaseToken;\r\n//                Log.d(\"newFcmID\", regId);\r\n//                Utility.logCatMsg(\"registerInBackground - regId: \"\r\n//                        + regId);\r\n//                String  msg = \"Device registered, registration ID=\" + regId;\r\n//                storeRegistrationId(context, regId);\r\n//                Utility.logCatMsg(\"AsyncTask completed: \" + msg);\r\n//\r\n//                if (prefs.getEmployeeID() != 0) {\r\n//                    ArrayList<Params> parameters = new ArrayList<Params>();\r\n//                    Params p1 = new Params();\r\n//                    Params p2 = new Params();\r\n//                    Params p3 = new Params();\r\n//                    Params p4 = new Params();\r\n//                    p1.setKey(\"Mac_address\");\r\n//                    p1.setValue(getMacAddress());\r\n//                    p2.setKey(\"GCM_RegId\");\r\n//                    p2.setValue(regId);\r\n//                    p4.setKey(\"UserId\");\r\n//                    p4.setValue(prefs.getEmployeeID() + \"\");\r\n//                    parameters.add(p1);\r\n//                    parameters.add(p2);\r\n//                    parameters.add(p4);\r\n//                    //                   new SetGCMId(\"SetGCMId\", \"ZEDtrack.asmx\", parameters).execute();\r\n//                    setGcmMethod(Utility.BASE_LIVE_URL +\"api/GCM/SetGCMID?ContactId=\" + prefs.getEmployeeID() + \"&Mac_address=\" + getMacAddress() + \"&GCMID=\" + regId);\r\n//                    Log.d(\"setGcmUrl\", Utility.BASE_LIVE_URL +\"api/GCM/SetGCMID?ContactId=\" + prefs.getEmployeeID() + \"&Mac_address=\" + getMacAddress() + \"&GCMID=\" + regId);\r\n//                } else {\r\n//                    Utility.Toast(RegisterActivity.this, \"Check network connection and try again\");\r\n//                }\r\n//            }\r\n//        });\r\n////        new AsyncTask<Void, Void, String>() {\r\n////            String msg = \"\";\r\n////\r\n////            @Override\r\n////            protected String doInBackground(Void... params) {\r\n//////                if (gcm == null) {\r\n//////                    gcm = GoogleCloudMessaging.getInstance(context);\r\n//////                }\r\n////                // regId = gcm.register(Config.GOOGLE_PROJECT_ID);\r\n////                //Getting FCM token instead of GCM token\r\n////                regId = FirebaseInstanceId.getInstance().getToken();\r\n////                Log.d(\"newFcmID\", regId);\r\n////                Utility.logCatMsg(\"registerInBackground - regId: \"\r\n////                        + regId);\r\n////                msg = \"Device registered, registration ID=\" + regId;\r\n////                storeRegistrationId(context, regId);\r\n////                Utility.logCatMsg(\"AsyncTask completed: \" + msg);\r\n////                return msg;\r\n////            }\r\n////\r\n////            @Override\r\n////            protected void onPostExecute(String aVoid) {\r\n////                if (prefs.getEmployeeID() != 0) {\r\n////                    ArrayList<Params> parameters = new ArrayList<Params>();\r\n////                    Params p1 = new Params();\r\n////                    Params p2 = new Params();\r\n////                    Params p3 = new Params();\r\n////                    Params p4 = new Params();\r\n////                    p1.setKey(\"Mac_address\");\r\n////                    p1.setValue(getMacAddress());\r\n////                    p2.setKey(\"GCM_RegId\");\r\n////                    p2.setValue(regId);\r\n////                    p4.setKey(\"UserId\");\r\n////                    p4.setValue(prefs.getEmployeeID() + \"\");\r\n////                    parameters.add(p1);\r\n////                    parameters.add(p2);\r\n////                    parameters.add(p4);\r\n////                    //                   new SetGCMId(\"SetGCMId\", \"ZEDtrack.asmx\", parameters).execute();\r\n////                    setGcmMethod(Utility.BASE_LIVE_URL +\"api/GCM/SetGCMID?ContactId=\" + prefs.getEmployeeID() + \"&Mac_address=\" + getMacAddress() + \"&GCMID=\" + regId);\r\n////                    Log.d(\"setGcmUrl\", Utility.BASE_LIVE_URL +\"api/GCM/SetGCMID?ContactId=\" + prefs.getEmployeeID() + \"&Mac_address=\" + getMacAddress() + \"&GCMID=\" + regId);\r\n////                } else {\r\n////                    Utility.Toast(RegisterActivity.this, \"Check network connection and try again\");\r\n////                }\r\n////            }\r\n////\r\n////\r\n////        }.execute(null, null, null);\r\n//    }\r\n\r\n//    private void storeRegistrationId(Context context, String regId) {\r\n//        final SharedPreferences prefs = getSharedPreferences(MainActivity.class.getSimpleName(), Context.MODE_PRIVATE);\r\n//        int appVersion = getAppVersion(context);\r\n//        Utility.logCatMsg(\"Saving regId on app version \" + appVersion);\r\n//        SharedPreferences.Editor editor = prefs.edit();\r\n//        editor.putString(REG_ID, regId);\r\n//        editor.putInt(APP_VERSION, appVersion);\r\n//        editor.commit();\r\n//    }\r\n\r\n//    private String getMacAddress() {\r\n//        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\r\n//        WifiInfo wInfo = wifiManager.getConnectionInfo();\r\n//        return wInfo.getMacAddress();\r\n//    }\r\n\r\n    //new GetRegisterCustomer api implemented\r\n//    private void getRegisterCustomerInfoMethod(String url) {\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//                Log.d(\"CustomerResponse\", response);\r\n//                initialFileDilog.dismiss();\r\n//                try {\r\n//                    JSONObject parentObject = new JSONObject(response);\r\n//                    JSONArray Table = parentObject.getJSONArray(\"Table\");\r\n//                    if (Table.length() > 0) {\r\n//                        parseJsonFeedItems(Table);\r\n//                        getCompanyRoutesMethod(Utility.BASE_LIVE_URL +\"api/Company/GetRegisterCompanyRoutes?Company_id=\" + prefs.getCompanyID() + \"&CompanySiteId=\" + prefs.getCompanySiteID());\r\n//                        Log.d(\"routesUrl\", Utility.BASE_LIVE_URL +\"api/Company/GetRegisterCompanyRoutes?Company_id=\" + prefs.getCompanyID() + \"&CompanySiteId=\" + prefs.getCompanySiteID());\r\n////                        new GetCompanyRoutes(\"GetRegisterCompanyRoutes\", \"ZEDtrack.asmx\", paramsArrayList).execute();\r\n//                    } else {\r\n//                        initialFileDilog.dismiss();\r\n//                        Utility.Toast(RegisterActivity.this, \"Failed....Login again \");\r\n//                    }\r\n//\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                initialFileDilog.dismiss();\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//                Log.d(\"registerCustomerError\", error.getMessage() + \"\");\r\n//            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(RegisterActivity.this);\r\n//        initialFileDilog.show();\r\n//        queue.add(request);\r\n//    }\r\n\r\n    //new CompanyRoutesApi implemented\r\n//    public void getCompanyRoutesMethod(String url) {\r\n//\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//                initialFileDilog.dismiss();\r\n//                Log.d(\"routeResponse\", response);\r\n//                try {\r\n//                    JSONObject parent = new JSONObject(response);\r\n//                    JSONArray tableArray = parent.getJSONArray(\"Table\");\r\n//                    if (tableArray.length() > 0) {\r\n//                        parseJsonFeedCompanyRoute(tableArray);\r\n//                        getCompanyDetailsMethod(Utility.BASE_LIVE_URL +\"api/Company/CompanyDetails?Company_id=\" + prefs.getCompanyID());\r\n//                        Log.d(\"companyDetailUrl\", Utility.BASE_LIVE_URL +\"api/Company/CompanyDetails?Company_id=\" + prefs.getCompanyID());\r\n//                        //new GetCompanyDetail(\"GetCompanyDetails\", \"ZEDtrack.asmx\", paramsArrayList).execute();\r\n//                    }\r\n//\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                initialFileDilog.dismiss();\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(this);\r\n//        initialFileDilog.show();\r\n//        queue.add(request);\r\n//\r\n//    }\r\n\r\n    //new CompanyDetailsAPI implemented\r\n//    public void getCompanyDetailsMethod(String url) {\r\n//\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//                initialFileDilog.dismiss();\r\n//                Log.d(\"companyDetailResponse\", response);\r\n//                try {\r\n//                    JSONObject parentObject = new JSONObject(response);\r\n//                    JSONArray tableArray = parentObject.getJSONArray(\"Table\");\r\n//                    JSONObject feedObj = (JSONObject) tableArray.get(0);\r\n//                    Log.d(\"companyObject\", feedObj.toString());\r\n//                    String companyName = feedObj.getString(\"CompanyTitle\");\r\n//                    String companyLog = feedObj.getString(\"Logo\");\r\n//                    //String companyId = feedObj.getString(\"Company_Id\");\r\n//                    if (!companyName.equals(\"null\"))\r\n//                        new SharedPrefs(RegisterActivity.this).setCompanyName(companyName);\r\n//                    if (!companyLog.equals(\"null\"))\r\n//                        Log.d(\"logo\", companyLog);\r\n//                    new SharedPrefs(RegisterActivity.this).setComapnyLogo(companyLog);\r\n//                    Log.d(\"companyItemList : \", paramsArrayList.toString());\r\n//                    getCompanyItemsMethod(Utility.BASE_LIVE_URL +\"api/Company/GetCompanyItems?Company_id=\" + prefs.getCompanyID());\r\n//                    Log.d(\"itemsUrl\", Utility.BASE_LIVE_URL +\"api/Company/GetCompanyItems?Company_id=\" + prefs.getCompanyID());\r\n//                    // new GetCompanyItems(\"GetCompanyItems\", \"ZEDtrack.asmx\", paramsArrayList).execute();\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//\r\n//\r\n//\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                initialFileDilog.dismiss();\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//                Log.d(\"companydetailError\", error.getMessage() + \"\");\r\n//            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(this);\r\n//        queue.add(request);\r\n//    }\r\n\r\n    //new GetCompanyItems API implemented\r\n//    private void getCompanyItemsMethod(String url) {\r\n//\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//                initialFileDilog.dismiss();\r\n//                Log.d(\"itemsResponse\", response);\r\n//                try {\r\n//                    JSONObject parentObject = new JSONObject(response);\r\n//                    JSONArray tableArray = parentObject.getJSONArray(\"Table\");\r\n//                    if (tableArray.length() > 0) {\r\n//                        parseJsonFeedCompanyItems(tableArray);\r\n//                        getCompanyVehiclesMethod(Utility.BASE_LIVE_URL +\"api/Vehicle/getCompanyVehicles?Company_id=\"+prefs.getCompanyID()+\"&Compnay_siteId=\"+prefs.getCompanySiteID());\r\n//                        Log.d(\"vehicleUrl\",Utility.BASE_LIVE_URL +\"api/Vehicle/getCompanyVehicles?Company_id=\"+prefs.getCompanyID()+\"&Compnay_siteId=\"+prefs.getCompanySiteID());\r\n//                    } else {\r\n//                        Toast.makeText(RegisterActivity.this, \"No items found\", Toast.LENGTH_SHORT).show();\r\n//                    }\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                initialFileDilog.dismiss();\r\n//                Log.d(\"itemsError\", error.getMessage() + \"\");\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(this);\r\n//        queue.add(request);\r\n//    }\r\n\r\n    //new GetVehicles api implemented\r\n//    private void getCompanyVehiclesMethod(String url){\r\n//\r\n//        StringRequest request = new StringRequest(url, new Response.Listener<String>() {\r\n//            @Override\r\n//            public void onResponse(String response) {\r\n//\r\n//                Log.d(\"vehiclesResponse\",response);\r\n//                try {\r\n//                    JSONObject parentObject = new JSONObject(response);\r\n//                   JSONArray tableArray = parentObject.getJSONArray(\"Table\");\r\n//                    ArrayList<VehicleModel> list = new ArrayList<>();\r\n//                    if(tableArray.length() > 0){\r\n//                        for (int i = 0; i < tableArray.length(); i++) {\r\n//                            VehicleModel model = new VehicleModel();\r\n//                            JSONObject object = (JSONObject) tableArray.get(i);\r\n//                            model.setId(object.getInt(\"id\"));\r\n//                            model.setRegNo(object.getString(\"RegNo\"));\r\n//                            model.setIsSelected(false);\r\n//                            list.add(model);\r\n//                        }\r\n//                        initialFileDilog.dismiss();\r\n//                        selectVehicleDialog(list);\r\n//                    }\r\n//                    else{\r\n//                        Toast.makeText(RegisterActivity.this, \"No Vehicles Found\", Toast.LENGTH_SHORT).show();\r\n//                    }\r\n//\r\n//                } catch (JSONException e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//\r\n//            }\r\n//        }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                initialFileDilog.dismiss();\r\n//                Log.d(\"vehiclesError\",error.getMessage()+\"\");\r\n//                if (error instanceof ServerError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Server error occurred\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof NetworkError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Network error\", Toast.LENGTH_SHORT).show();\r\n//                } else if (error instanceof TimeoutError) {\r\n//                    Toast.makeText(RegisterActivity.this, \"Connection timeout error\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//\r\n//            }\r\n//        });\r\n//\r\n//        RequestQueue queue = Volley.newRequestQueue(this);\r\n//        queue.add(request);\r\n//    }\r\n\r\n    private void selectVehicleDialog(final ArrayList<VehicleModel> list) {\r\n\r\n        new SyncDataFromServer(this).GetJobs(); //todo to sync data from server\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(RegisterActivity.this);\r\n        View v = getLayoutInflater().inflate(R.layout.vehicle_list_layout, null);\r\n        ListView listview = v.findViewById(R.id.listview);\r\n        final VehicleListAdapter adp = new VehicleListAdapter(RegisterActivity.this, list);\r\n        listview.setAdapter(adp);\r\n        builder.setView(v).setTitle(\"Select Vehicle\").setCancelable(false);\r\n        builder.setPositiveButton(\"Ok\", (dialog, which) -> {\r\n            prefs.setIsStayLogin(true);\r\n            prefs.hSetLogout(false);\r\n\r\n            Intent intent = new Intent(RegisterActivity.this, WelcomeActivity.class);\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n            startActivity(intent);\r\n            overridePendingTransition(R.anim.right_in, R.anim.left_out);\r\n            finish();\r\n//              showRoutesDialog();\r\n            dialog.dismiss();\r\n        });\r\n\r\n        final AlertDialog dialog = builder.create();\r\n        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                progress.dismiss();\r\n\r\n                //Validation for to select one vehicle...\r\n                list.get(position).setIsSelected(true);\r\n                int SelectedIndex = list.get(position).getId();\r\n                for (int i = 0; i < list.size(); i++) {\r\n                    list.get(position).setIsSelected(true);\r\n                    list.get(i).setIsSelected(false);\r\n\r\n\r\n                    if (list.get(i).getId() == SelectedIndex) {\r\n                        list.get(position).setIsSelected(true);\r\n                    }\r\n\r\n                }\r\n\r\n                //Setting Vehicle id to preferences...\r\n                prefs.setVehicleID(list.get(position).getId());\r\n                prefs.setVehicleName(list.get(position).getRegNo());\r\n\r\n\r\n                Log.d(\"RegNoSelected\", list.get(position).getRegNo());\r\n\r\n                adp.notifyDataSetChanged();\r\n            }\r\n        });\r\n        dialog.show();\r\n    }\r\n\r\n\r\n//    private void showRoutesDialog(){\r\n//\r\n//        FragmentManager fm = getSupportFragmentManager();\r\n//        SelectRoutesFragment selectRoutesFragment = SelectRoutesFragment.newInstance(\"yaseen\");\r\n//        selectRoutesFragment.show(fm, \"yaseengondal\");\r\n//    }\r\n\r\n//    private void parseJsonFeedItems(JSONArray feedArray) {\r\n//        try {\r\n//            feedRegCustomerList.clear();\r\n//            for (int i = 0; i < feedArray.length(); i++) {\r\n//                JSONObject feedObj = (JSONObject) feedArray.get(i);\r\n//                RegisterdCustomerModel model = new RegisterdCustomerModel();\r\n//                model.setCustomer_id(feedObj.getInt(\"ContactId\"));\r\n//                model.setName(feedObj.getString(\"Name\").equals(\"null\") ? \"\" : feedObj.getString(\"Name\"));\r\n//                model.setAddress(feedObj.getString(\"Address\").equals(\"null\") ? \"\" : feedObj.getString(\"Address\"));\r\n//                model.setAddress1(feedObj.getString(\"Address1\").equals(\"null\") ? \"\" : feedObj.getString(\"Address1\"));\r\n//                model.setCell(feedObj.getString(\"Phone\").equals(\"null\") ? \"\" : feedObj.getString(\"Phone\"));\r\n//                model.setPhone(feedObj.getString(\"Phone2\").equals(\"null\") ? \"\" : feedObj.getString(\"Phone2\"));\r\n//                model.setCity(feedObj.getString(\"City\").equals(\"null\") ? \"\" : feedObj.getString(\"City\"));\r\n//                model.setCountry(feedObj.getString(\"Country\").equals(\"null\") ? \"\" : feedObj.getString(\"Country\"));\r\n//                model.setLat(feedObj.getString(\"Latitude\").trim());\r\n//                model.setLng(feedObj.getString(\"Longitude\").trim());\r\n//                model.setRoute(feedObj.getInt(\"RouteId\"));\r\n//                model.setCode(feedObj.getString(\"ContactCode\"));\r\n//                feedRegCustomerList.add(model);\r\n//            }\r\n//\r\n//        } catch (JSONException e) {\r\n//            e.printStackTrace();\r\n//            Utility.logCatMsg(\"Feed Register Customer error\" + e);\r\n//        }\r\n//\r\n//    }\r\n\r\n//    private void parseJsonFeedCompanyItems(JSONArray feedArray) {\r\n//        try {\r\n//            feedCompanyItemList.clear();\r\n//            for (int i = 0; i < feedArray.length(); i++) {\r\n//                JSONObject feedObj = (JSONObject) feedArray.get(i);\r\n//                DeliveryItemModel model = new DeliveryItemModel();\r\n//                model.setItem_id(feedObj.getInt(\"Id\"));\r\n//                model.setTitle(feedObj.getString(\"Title\"));\r\n//                model.setCode(feedObj.getString(\"Code\"));\r\n//                model.setName(feedObj.getString(\"Name\"));\r\n//                model.setItemDetail(feedObj.getString(\"ItemDetail\"));\r\n//                model.setCostCtnPrice(feedObj.getInt(\"CostCtnPrice\"));\r\n//                model.setCostPackPrice(feedObj.getInt(\"CostPackPrice\"));\r\n//                model.setCostPiecePrice(feedObj.getInt(\"CostPiecePrice\"));\r\n//                model.setWSCtnPrice(feedObj.getInt(\"WSCtnPrice\"));\r\n//                model.setWSPackPrice(feedObj.getInt(\"WSPackPrice\"));\r\n//                model.setWSPiecePrice(feedObj.getInt(\"WSPiecePrice\"));\r\n//                model.setRetailCtnPrice(feedObj.getInt(\"RetailCtnPrice\"));\r\n//                model.setRetailPackPrice(feedObj.getInt(\"RetailPackPrice\"));\r\n//                model.setRetailPiecePrice(feedObj.getInt(\"RetailPiecePrice\"));\r\n//                model.setDisplayPrice(feedObj.getInt(\"DisplayPrice\"));\r\n//                model.setCtnSize(feedObj.getInt(\"CtnSize\"));\r\n//                model.setPackSize(feedObj.getInt(\"PackSize\"));\r\n////                boolean emptyFlag =\r\n//                model.setEmptyFlag(feedObj.getBoolean(\"EmptyFlag\"));\r\n//\r\n//                feedCompanyItemList.add(model);\r\n//            }\r\n//        } catch (JSONException e) {\r\n//\r\n//            e.printStackTrace();\r\n//            Utility.logCatMsg(\"Feed CompanyItems error\" + e);\r\n//        }\r\n//        if (feedRegCustomerList.size() > 0) {\r\n//            db.dropPlanOrderTables();\r\n//            db.dropRunTimeOrderTables();\r\n//            db.createPlanOrderTables();\r\n//            db.createRunTimeOrderTables();\r\n//            db.insertCompanyCustomer(feedRegCustomerList, \"False\");\r\n//\r\n//            if (routelist.size() > 0)\r\n//                db.insertCompanyRoute(routelist);\r\n//\r\n//            if (feedCompanyItemList.size() > 0) {\r\n//                db.insertCompanyItem(feedCompanyItemList);\r\n//            }\r\n//        } else {\r\n//            //Utility.Toast(getApplicationContext(), \"No Job Available Today\");\r\n//\r\n//        }\r\n//    }\r\n\r\n//    private void parseJsonFeedCompanyRoute(JSONArray feedArray) {\r\n//        try {\r\n//            routelist.clear();\r\n//            for (int i = 0; i < feedArray.length(); i++) {\r\n//                JSONObject feedObj = (JSONObject) feedArray.get(i);\r\n//                RouteModel model = new RouteModel();\r\n//                model.setRoute_id(feedObj.getInt(\"Route_Id\"));\r\n//                model.setRoute_code(feedObj.getString(\"Code\"));\r\n//                model.setRoute_name(feedObj.getString(\"Title\"));\r\n//                model.setRoute_description(feedObj.getString(\"Descript\"));\r\n//                routelist.add(model);\r\n//            }\r\n//\r\n//        } catch (JSONException e) {\r\n//            e.printStackTrace();\r\n//            Utility.logCatMsg(\"Feed CompanyRoute error\" + e);\r\n//        }\r\n//\r\n//    }\r\n\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n    }\r\n\r\n    private void setUpActionBar(ActionBar actionBar) {\r\n        LinearLayout mainLayout = findViewById(R.id.mainLayout);\r\n        View v = getLayoutInflater().inflate(R.layout.actionbar_view, mainLayout, false);\r\n        ImageButton btnMenu = v.findViewById(R.id.btnMenu);\r\n        btnMenu.setVisibility(View.GONE);\r\n        actionBar.setDisplayHomeAsUpEnabled(false);\r\n        actionBar.setDisplayShowHomeEnabled(false);\r\n        actionBar.setDisplayShowTitleEnabled(false);\r\n        actionBar.setDisplayShowCustomEnabled(true);\r\n        actionBar.setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.appbluegrey)));\r\n        actionBar.setCustomView(v);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/detrack/zaryansgroup/com/detrack/activity/activites/RegisterActivity.java b/app/src/main/java/detrack/zaryansgroup/com/detrack/activity/activites/RegisterActivity.java
--- a/app/src/main/java/detrack/zaryansgroup/com/detrack/activity/activites/RegisterActivity.java	
+++ b/app/src/main/java/detrack/zaryansgroup/com/detrack/activity/activites/RegisterActivity.java	
@@ -87,7 +87,6 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        Timber.d("Oncreate");
         setContentView(R.layout.activity_register);
 
 
@@ -173,9 +172,6 @@
             overridePendingTransition(R.anim.right_in, R.anim.left_out);
             finish();
 
-            Timber.d("SiteId="+prefs.getCompanySiteID()+"");
-            Timber.d("CompanyId="+prefs.getCompanyID()+"");
-            Timber.d("SiteId="+prefs.getUserId()+"");
 
         }
     }
@@ -185,7 +181,6 @@
 
         if (!prefs.hGetLogOut()) {
 
-            Timber.d("hlogout Status:"+prefs.hGetLogOut());
 
             requestLoginVM();
             getRegisterCustomerInfoVM();
@@ -194,7 +189,6 @@
             getCompanyItemsVM();
             getCustomerPrice();
 
-            Timber.d("UserId is"+prefs.getUserId());
 
             response_login_vm.getCompanyVehicles().observe(
                     this,
@@ -400,8 +394,6 @@
                         prefs.setCurrency(feedObj.getCurrency());
 
 
-                        Timber.d("tempIsGSTVisible : "+prefs.getIsGSTVisible());
-                        Timber.d("IsDiscountVisible : "+prefs.getIsDiscountVisible());
 
                         if (companyview.equalsIgnoreCase("2nd View")) {
                             prefs.setView("secondView");
@@ -462,7 +454,6 @@
 
                 if (feedRegCustomerList.size() > 0) {
 
-                    Timber.d("feedRegCustomerList"+feedRegCustomerList.size());
 
                     db.dropPlanOrderTables();
                     db.dropRunTimeOrderTables();
@@ -471,18 +462,13 @@
                     db.insertCompanyCustomer(feedRegCustomerList, "False");
 
                     if (routelist.size() > 0)
-                        Timber.d("routelist"+routelist.size());
                         db.insertCompanyRoute(routelist);
 
                     if (feedCompanyItemList.size() > 0) {
-                        Timber.d("feedCompanyItemList"+feedCompanyItemList.size());
                         db.insertCompanyItem(feedCompanyItemList);
                     }
 
 
-                    Log.d("vehicleUrl", Utility.BASE_LIVE_URL + "api/Vehicle/getCompanyVehicles?Company_id="
-                            + prefs.getCompanyID() + "&Compnay_siteId=" + prefs.getCompanySiteID());
-
                 } else {
                     //Utility.Toast(getApplicationContext(), "No Job Available Today");
                     Log.d("Company Items", "null");
@@ -497,28 +483,24 @@
 
     //todo
     private void getCustomerPrice() {
+        Timber.d("Getting Customer price");
         final LiveData<CustomerPriceListModel> customerPriceListObv = response_login_vm.getCustomerPriceList();
-        customerPriceListObv.observe(this, new Observer<CustomerPriceListModel>() {
-            @Override
-            public void onChanged(CustomerPriceListModel customerPriceListModel) {
+        customerPriceListObv.observe(this, customerPriceListModel -> {
 
-                Timber.d("Customer Price List Model size is "+customerPriceListModel.getTable().size()+"");
+            Timber.d("Customer Price List Model size is "+customerPriceListModel.getTable().size()+"");
 
-                db.insertCustomerPrice(customerPriceListModel.getTable());
-                response_login_vm.ReqCompanyVehicles(prefs.getCompanyID(), prefs.getCompanySiteID());
+            db.insertCustomerPrice(customerPriceListModel.getTable());
+            response_login_vm.ReqCompanyVehicles(prefs.getCompanyID(), prefs.getCompanySiteID());
 
 
-            }
         });
     }
 
     private void getCompanyVehicleVM() {
-        Timber.d("getCompanyVehicleVM");
         final LiveData<VehicleListModel> vehicledataObserver = response_login_vm.getCompanyVehicles();
         vehicledataObserver.observe(this, new Observer<VehicleListModel>() {
             @Override
             public void onChanged(VehicleListModel vehicleListModel) {
-                Timber.d("onChanged");
             }
         });
     }
